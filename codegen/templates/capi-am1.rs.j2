// Auto-generated by codegen, do not edit manually

use std::ffi::{c_int, c_void};

use rustsat::{
    encodings::am1::{Encode,
        {%- for enc in encodings -%}
        {%- if not enc.wrapped -%}{{ enc.name }},{%- endif -%}
        {%- endfor -%}
    },
    types::Lit,
};

use super::{CClauseCollector, ClauseCollector, MaybeError, VarManager,
    {%- for enc in encodings -%}
    {%- if enc.wrapped -%}{{ enc.name }},{%- endif -%}
    {%- endfor -%}
};

{% for enc in encodings %}

/// Creates a new [`{{ enc.name }}`] at-most-one encoding
#[no_mangle]
#[allow(clippy::missing_safety_doc)]
pub unsafe extern "C" fn {{ enc.id }}_new() -> *mut {{ enc.name }} {
    Box::into_raw(Box::default())
}

{% include 'capi-drop.j2' %}

/// Adds a new input literal to a [`{{ enc.name }}`] encoding
///
/// # Errors
///
{% include 'capi-ipasir-lit.j2' %}
{% include 'capi-safety.j2' %}
#[no_mangle]
pub unsafe extern "C" fn {{ enc.id }}_add({{ enc.id }}: *mut {{ enc.name }}, lit: c_int) -> MaybeError {
    let Ok(lit) = Lit::from_ipasir(lit) else {
        return MaybeError::InvalidLiteral;
    };
    (*{{ enc.id }})
        {%- if enc.wrapped -%}.0{%- endif -%}
        .extend([lit]);
    MaybeError::Ok
}

/// Builds the [`{{ enc.name }}`] at-most-one encoding
///
{% include 'capi-collector-n-vars.j2' %}
{% include 'capi-safety.j2' %}
#[allow(clippy::missing_panics_doc)]
#[no_mangle]
pub unsafe extern "C" fn {{ enc.id }}_encode(
    {{ enc.id }}: *mut {{ enc.name }},
    n_vars_used: &mut u32,
    collector: CClauseCollector,
    collector_data: *mut c_void,
) {
    let mut collector = ClauseCollector::new(collector, collector_data);
    let mut var_manager = VarManager::new(n_vars_used);
    (*{{ enc.id }})
        {%- if enc.wrapped -%}.0{%- endif -%}
        .encode(&mut collector, &mut var_manager)
        .expect("CClauseCollector cannot report out of memory");
}

{% endfor %}
