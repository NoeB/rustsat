// Auto-generated by codegen, do not edit manually

use std::ffi::{c_int, c_void};

use rustsat::{
    encodings::pb::{
        {%- if ub -%}BoundUpper, BoundUpperIncremental, {% endif %}{%- if lb -%}BoundLower, BoundLowerIncremental, {% endif %}EncodeIncremental,
        {%- for enc in encodings -%}
        {%- if not enc.from_super -%}{{ enc.name }},{%- endif -%}
        {%- endfor -%}
    },
    types::Lit,
};

use super::{CAssumpCollector, CClauseCollector, ClauseCollector, MaybeError, VarManager};

{% for enc in encodings %}

/// Creates a new [`{{ enc.name }}`] pseudo-Boolean encoding
#[no_mangle]
#[allow(clippy::missing_safety_doc)]
pub unsafe extern "C" fn {{ enc.id }}_new() -> *mut {{ enc.name }} {
    Box::into_raw(Box::default())
}

{% include 'capi-drop.j2' %}

{% include 'capi-reserve.j2' %}

/// Adds a new input literal to a [`{{ enc.name }}`] encoding
///
/// # Errors
///
{% include 'capi-ipasir-lit.j2' %}
{% include 'capi-safety.j2' %}
#[no_mangle]
pub unsafe extern "C" fn {{ enc.id }}_add({{ enc.id }}: *mut {{ enc.name }}, lit: c_int, weight: usize) -> MaybeError {
    let Ok(lit) = Lit::from_ipasir(lit) else {
        return MaybeError::InvalidLiteral;
    };
    {%- if enc.extend -%}
    (*{{ enc.id }}).extend([(lit, weight)]);
    MaybeError::Ok
    {%- else -%}
    if (*{{ enc.id }}).add_input(lit, weight).is_ok() {
        MaybeError::Ok
    } else {
        MaybeError::InvalidState
    }
    {%- endif -%}
}

{% if enc.ub %}

/// Lazily builds the _change in_ pseudo-Boolean encoding to enable upper bounds in a given range.
/// A change might be added literals or changed bounds.
///
/// The min and max bounds are inclusive. After a call to [`{{ enc.id }}_encode_ub`] with `min_bound=2` and
/// `max_bound=4` bound including `<= 2` and `<= 4` can be enforced.
///
{% include 'capi-collector-n-vars.j2' %}
///
{% include 'capi-bound-panic.j2' %}
{% include 'capi-safety.j2' %}
#[no_mangle]
pub unsafe extern "C" fn {{ enc.id }}_encode_ub(
    {{ enc.id }}: *mut {{ enc.name }},
    min_bound: usize,
    max_bound: usize,
    n_vars_used: &mut u32,
    collector: CClauseCollector,
    collector_data: *mut c_void,
) {
    assert!(min_bound <= max_bound);
    let mut collector = ClauseCollector::new(collector, collector_data);
    let mut var_manager = VarManager::new(n_vars_used);
    (*{{ enc.id }})
        .encode_ub_change(min_bound..=max_bound, &mut collector, &mut var_manager)
        .expect("CClauseCollector cannot report out of memory");
}

/// Returns assumptions/units for enforcing an upper bound (`sum of lits <= ub`). Make sure that
/// [`{{ enc.id }}_encode_ub`] has been called adequately and nothing has been called afterwards, otherwise
/// [`MaybeError::NotEncoded`] will be returned.
{% include 'capi-assumps.j2' %}
{% include 'capi-safety.j2' %}
#[no_mangle]
pub unsafe extern "C" fn {{ enc.id }}_enforce_ub(
    {{ enc.id }}: *mut {{ enc.name }},
    ub: usize,
    collector: CAssumpCollector,
    collector_data: *mut c_void,
) -> MaybeError {
    match (*{{ enc.id }}).enforce_ub(ub) {
        Ok(assumps) => {
            assumps.into_iter().for_each(|a| collector(a.to_ipasir(), collector_data));
            MaybeError::Ok
        }
        Err(err) => err.into(),
    }
}

{% endif %}

{% if enc.lb %}

/// Lazily builds the _change in_ pseudo-Boolean encoding to enable lower bounds in a given range.
/// A change might be added literals or changed bounds.
///
/// The min and max bounds are inclusive. After a call to [`{{ enc.id }}_encode_lb`] with `min_bound=2` and
/// `max_bound=4` bound including `<= 2` and `<= 4` can be enforced.
///
{% include 'capi-collector-n-vars.j2' %}
///
{% include 'capi-bound-panic.j2' %}
{% include 'capi-safety.j2' %}
#[no_mangle]
pub unsafe extern "C" fn {{ enc.id }}_encode_lb(
    {{ enc.id }}: *mut {{ enc.name }},
    min_bound: usize,
    max_bound: usize,
    n_vars_used: &mut u32,
    collector: CClauseCollector,
    collector_data: *mut c_void,
) {
    assert!(min_bound <= max_bound);
    let mut collector = ClauseCollector::new(collector, collector_data);
    let mut var_manager = VarManager::new(n_vars_used);
    (*{{ enc.id }})
        .encode_lb_change(min_bound..=max_bound, &mut collector, &mut var_manager)
        .expect("CClauseCollector cannot report out of memory");
}

/// Returns assumptions/units for enforcing a lower bound (`sum of lits <= ub`). Make sure that
/// [`{{ enc.id }}_encode_lb`] has been called adequately and nothing has been called afterwards, otherwise
/// [`MaybeError::NotEncoded`] will be returned.
{% include 'capi-assumps.j2' %}
{% include 'capi-safety.j2' %}
#[no_mangle]
pub unsafe extern "C" fn {{ enc.id }}_enforce_lb(
    {{ enc.id }}: *mut {{ enc.name }},
    lb: usize,
    collector: CAssumpCollector,
    collector_data: *mut c_void,
) -> MaybeError {
    match (*{{ enc.id }}).enforce_lb(lb) {
        Ok(assumps) => {
            assumps.into_iter().for_each(|a| collector(a.to_ipasir(), collector_data));
            MaybeError::Ok
        }
        Err(err) => err.into(),
    }
}

{% endif %}

{% endfor %}

#[cfg(all(test, not(target_os = "windows")))]
mod tests {
    use inline_c::assert_c;

    {% for enc in encodings %}

    {% include 'capi-test-drop.j2' %}

    #[test]
    fn {{ enc.id }}_basic() {
        (assert_c! {
            #include <assert.h>
            #include "rustsat.h"

            void clause_counter(int lit, void *data) {
                if (!lit) {
                    int *cnt = (int *)data;
                    (*cnt)++;
                }
            }

            int main() {
                {{ enc.name }} *{{ enc.id }} = {{ enc.id }}_new();
                assert({{ enc.id }}_add({{ enc.id }}, 1, 1) == Ok);
                assert({{ enc.id }}_add({{ enc.id }}, 2, 2) == Ok);
                assert({{ enc.id }}_add({{ enc.id }}, 3, 3) == Ok);
                assert({{ enc.id }}_add({{ enc.id }}, 4, 4) == Ok);
                uint32_t n_used = 4;
                uint32_t n_clauses = 0;
                {%- if enc.ub %}
                {{ enc.id }}_encode_ub({{ enc.id }}, 0, 10, &n_used, &clause_counter, &n_clauses);
                {%- endif -%}
                {%- if enc.lb %}
                {{ enc.id }}_encode_lb({{ enc.id }}, 0, 10, &n_used, &clause_counter, &n_clauses);
                {%- endif %}
                {{ enc.id }}_drop({{ enc.id }});
                assert(n_used == {{ enc.n_vars }});
                assert(n_clauses == {{ enc.n_clauses }});
                return 0;
            }
        })
        .success();
    }

    {% if not enc.skip_reserve %}
    #[test]
    fn {{ enc.id }}_reserve() {
        (assert_c! {
            #include <assert.h>
            #include "rustsat.h"

            void clause_counter(int lit, void *data) {
                if (!lit) {
                    int *cnt = (int *)data;
                    (*cnt)++;
                }
            }

            int main() {
                {{ enc.name }} *{{ enc.id }} = {{ enc.id }}_new();
                assert({{ enc.id }}_add({{ enc.id }}, 1, 1) == Ok);
                assert({{ enc.id }}_add({{ enc.id }}, 2, 2) == Ok);
                assert({{ enc.id }}_add({{ enc.id }}, 3, 3) == Ok);
                assert({{ enc.id }}_add({{ enc.id }}, 4, 4) == Ok);
                uint32_t n_used = 4;
                uint32_t n_clauses = 0;
                {{ enc.id }}_reserve({{ enc.id }}, &n_used);
                assert(n_used == {{ enc.n_vars_reserve }});
                {%- if enc.ub %}
                {{ enc.id }}_encode_ub({{ enc.id }}, 0, 6, &n_used, &clause_counter, &n_clauses);
                assert(n_used == {{ enc.n_vars_reserve }});
                {%- endif -%}
                {%- if enc.lb %}
                {{ enc.id }}_encode_ub({{ enc.id }}, 0, 6, &n_used, &clause_counter, &n_clauses);
                assert(n_used == {{ enc.n_vars_reserve }});
                {%- endif %}
                {{ enc.id }}_drop({{ enc.id }});
                return 0;
            }
        })
        .success();
    }
    {% endif %}

    {% endfor %}
}
